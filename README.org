#+TITLE: Building A Clojure Web App
#+AUTHOR: Marcus Ahnve
#+EMAIL: marcus.ahnve@valtech.se
#+OPTIONS: toc:1
#+OPTIONS: reveal_width:1280
#+OPTIONS: reveal_slide_number:h/v
#+OPTIONS: num:nil
#+REVEAL_THEME: solarized
#+REVEAL_TRANS: fade

* Hello World

#+begin_src sh :results code sh
$ lein new app data_backend

Generating a project called data_backend based on the 'app' template.
#+end_src

** Structure

#+begin_src sh :results code sh
$ tree .
.
├── CHANGELOG.md
├── doc
│   └── intro.md
├── doc.org
├── LICENSE
├── project.clj
├── README.md
├── resources
├── src
│   └── data_backend
│       └── core.clj
└── test
    └── data_backend
        └── core_test.clj

6 directories, 8 files
#+END_SRC

** Build jar

#+begin_src sh :results code sh
$ lein uberjar

Created [..]/target/uberjar/data_backend-0.1.0-SNAPSHOT.jar
Created [..]/target/uberjar/data_backend-0.1.0-SNAPSHOT-standalone.jar
#+END_SRC

** Run it

#+begin_src sh :results drawer
$ java -jar target/uberjar/data_backend-0.1.0-SNAPSHOT-standalone.jar

Hello, World!
#+END_SRC

* Make it webby

** Add Ring

- Start REPL
  - Jack in etc

#+begin_src clojure
[ring/ring-defaults "0.2.0"]
[ring "1.4.0"]
#+end_src

** Add Handler

In a new file handler.clj, create a handler

#+begin_src clojure
(defn app [request]
  {:status 200
   :headers {"Content-Type" "text/plain"}
   :body "Hello World"})
#+end_src

** Run in REPL

#+begin_src clojure
(ring.adapter.jetty/run-jetty #'data-backend.handler/app {:port 2001})
#+end_src

** Add server definition

Locks up REPL, add server definition (idea from [[https://stackoverflow.com/questions/2706044/how-do-i-stop-jetty-server-in-clojure#2706239][StackOverflow]])

#+begin_src clojure
(def server (jetty/run-jetty #'handler/app {:port 3000 :join? false}))
#+end_src

Now we can start and stop the server as such in the REPL:

#+begin_src clojure
(.start server)

(.stop server)
#+end_src

* Compojure

** Add Compojure

Add to project.clj:

#+begin_src clojure
[compojure "1.5.0"]
#+end_src

Change app to 

#+begin_src clojure
(:require [compojure
            [core :refer :all]
            [route :as route]]))

(defroutes app
  (GET "/" [] "Hello world"))
#+end_src

** Responses
     Responses

* Hiccup
** Add to project.clj

#+begin_src clojure
[hiccup "1.0.5"]
#+end_src
** Add views 

#+begin_src clojure
  (:require [compojure
             [core :refer :all]
             [route :as route]]
            [hiccup.page :as h]))

(defroutes app
  (GET "/" [] (h/html5 [:h1 "hello"])))
#+end_src
** Add a CSS Framework

#+begin_src clojure
(def head [:head
           [:link {:rel "stylesheet" :href "https://fonts.googleapis.com/icon?family=Material+Icons"}]
           [:link {:rel "stylesheet" :href "https://code.getmdl.io/1.1.3/material.indigo-pink.min.css"}]
           [:script {:src "https://code.getmdl.io/1.1.3/material.min.js"}]])
#+end_src
** Include it in view 

#+begin_src clojure
  (h/html5 head [:body [:h1 "hello"]])
#+end_src
** Try it out:

#+begin_src clojure

 [:body
            [:div {:class "mdl-layout mdl-js-layout mdl-layout--fixed-header"}
             navigation

#+end_src
#+begin_src clojure
(def navigation [:header {:class "mdl-layout__header"}
                 [:div {:class "mdl-layout__header-row"}
                  [:span {:class "mdl-layout-title"} "Hej!"]
                  [:div {:class "mdl-layout-spacer"}]
                  [:nav {:class "mdl-navigation"}
                   [:a {:class "mdl-navigation__link" :href "#"} "Link"]]]])
#+end_src

See more: [[https://www.getmdl.io/components/index.html#layout-section][https://www.getmdl.io/components/index.html#layout-section]]
** Extract Reusable Parts:

#+begin_src clojure
(defn render-page [content]
  (h/html5 head
           [:body
            [:div {:class "mdl-layout mdl-js-layout mdl-layout--fixed-header"}
             navigation
             [:main {:class "mdl-layout__content"}
              content]]]))

(def home-page (render-page [:h1 "hello"]))
(def about-page (render-page  [:h1 "About"]))

#+end_src
** Add and require defaults wrapper
#+begin_src clojure
[ring/ring-defaults "0.2.0"]
#+end_src

#+begin_src clojure
[ring.middleware.defaults :refer [wrap-defaults site-defaults]
#+end_src

*** Rename handler and wrap it
#+begin_src clojure
(def app (-> the-routes (wrap-defaults site-defaults)))
#+end_src

*** Add Style sheet

#+begin_src sh
$ touch resources/public/css/styles.css
#+end_src

* Compojure API

** Add to project.clj:

#+begin_src clojure
[metosin/compojure-api "1.0.2"]]
#+end_src

** Change requires in handler.clj

#+begin_src clojure
(:require [compojure.api.sweet :refer :all]
            [hiccup.page :as h]
            [ring.util.response :as response])
#+end_src

** Add Swagger and test API

#+begin_src clojure
(api
   {:swagger
    {:ui "/api-docs"
     :spec "/swagger.json"
     :data {:info {:title "Sample API"
                   :description "Compojure Api example"}
            :tags [{:name "api", :description "some apis"}]}}}

   (context "/api" []
     :tags ["api"]

     (GET "/plus" []
       :return {:result Long}
       :query-params [x :- Long, y :- Long]
       :summary "adds two numbers together"
       {:body  {:result (+ x y)}})))

#+end_src

** Add and require ring-middleware-format
#+begin_src clojure
[ring-middleware-format "0.7.0"]]
#+end_src

#+begin_src clojure
[ring.middleware.format :refer [wrap-restful-format]]
#+end_src

*** Test out in Swagger
* ClojureScript!

** Add ClojureScript And Reagent

#+begin_src clojure
[org.clojure/clojurescript "1.8.40"]
[reagent "0.6.0-alpha"]
#+end_src

** Add Figwheel

#+begin_src clojure
:plugins [[lein-figwheel "0.5.1"]]
#+end_src

** Move Clojure source 


*** Move source catalog

#+begin_src sh
$ mkdir src/clj

$ mv src/<app-name> src/clj
#+end_src

*** Add source path directive

#+begin_src clojure
:source-paths ["src/clj"]
#+end_src

*** Restart REPL to see it works

** Add build for ClojureScript

*** From the [[https://github.com/bhauman/lein-figwheel][Figwheel GitHub]]  

#+begin_src clojure
:cljsbuild {
  :builds [{ :id "<app-name>" 
              :source-paths ["src/cljs"]
              :figwheel true
              :compiler {  :main "<app-name>.core"
                           :asset-path "js/out"
                           :output-to "resources/public/js/<app-name>.js"
                           :output-dir "resources/public/js/out" } } ]
}
#+end_src

** Add Figwheel Options

#+begin_src clojure
 :figwheel {:css-dirs ["resources/public/css"]
            :ring-handler <app-name>.handler/app}
#+end_src

** Add a div to your HTML for testing

#+begin_src clojure
[:div {:id "js-here"}]
#+end_src

** Add JS to HTML

Somewhere in body

#+begin_src clojure
[:script {:src "/js/data-backend.js" :type "text/javascript"}]
#+end_src

** Run Figwheel

#+begin_src sh
$ lein figwheel
#+end_src

** Edit core.cljs

#+begin_src clojure
(ns <app-name>.core
  (:require [reagent.core :as r]))

(defn main []
  [:p "Hello Again!!"])

(r/render [#'main] (.getElementById js/document "js-here"))
#+end_src

** Add and require cljs-ajax

#+begin_src clojure
[cljs-ajax "0.5.2"]
#+end_src


#+begin_src clojure
[ajax.core :as ajax]
#+end_src

** Add ajax call

#+begin_src clojure
(defonce current-method (r/atom ""))

(defn handler [response]
  (reset! current-method (:result response)))

(defn error-handler [{:keys [status status-text]}]
  (.log js/console (str "something happened: " status ", " status-text)))

(defn get-new-method []
  (ajax/GET "/api/random" {:response-format :transit
                           :handler handler
                           :error-handler error-handler}))

(defn main []
  [:div
   [:p (str  "Hello Again!!! " @current-method)]
   [:a {:href "#" :on-click #((get-new-method))} "Again"]])

(r/render [#'main] (.getElementById js/document "js-here"))

#+end_src

